// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: user.proto

package user

import (
	"context"

	"code-hikari/user/rpc/server"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FindByIdRequest       = server.FindByIdRequest
	FindByIdResponse      = server.FindByIdResponse
	FindByMobileRequest   = server.FindByMobileRequest
	FindByMobileResponse  = server.FindByMobileResponse
	LoginResponse         = server.LoginResponse
	MobileLoginRequest    = server.MobileLoginRequest
	RegisterRequest       = server.RegisterRequest
	RegisterResponse      = server.RegisterResponse
	SendSmsRequest        = server.SendSmsRequest
	SendSmsResponse       = server.SendSmsResponse
	UserInfoResponse      = server.UserInfoResponse
	UserInfoUpdateRequest = server.UserInfoUpdateRequest
	UsernameLoginRequest  = server.UsernameLoginRequest

	User interface {
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error)
		FindByMobile(ctx context.Context, in *FindByMobileRequest, opts ...grpc.CallOption) (*FindByMobileResponse, error)
		SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error)
		MobileLogin(ctx context.Context, in *MobileLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		UsernameLogin(ctx context.Context, in *UsernameLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		UserInfoUpdate(ctx context.Context, in *UserInfoUpdateRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := server.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error) {
	client := server.NewUserClient(m.cli.Conn())
	return client.FindById(ctx, in, opts...)
}

func (m *defaultUser) FindByMobile(ctx context.Context, in *FindByMobileRequest, opts ...grpc.CallOption) (*FindByMobileResponse, error) {
	client := server.NewUserClient(m.cli.Conn())
	return client.FindByMobile(ctx, in, opts...)
}

func (m *defaultUser) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error) {
	client := server.NewUserClient(m.cli.Conn())
	return client.SendSms(ctx, in, opts...)
}

func (m *defaultUser) MobileLogin(ctx context.Context, in *MobileLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := server.NewUserClient(m.cli.Conn())
	return client.MobileLogin(ctx, in, opts...)
}

func (m *defaultUser) UsernameLogin(ctx context.Context, in *UsernameLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := server.NewUserClient(m.cli.Conn())
	return client.UsernameLogin(ctx, in, opts...)
}

func (m *defaultUser) UserInfoUpdate(ctx context.Context, in *UserInfoUpdateRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := server.NewUserClient(m.cli.Conn())
	return client.UserInfoUpdate(ctx, in, opts...)
}
